//
//  hash.swift
//  programmers
//
//  Created by heyji on 2022/08/09.
//

/*
 해시 테이블 또는 해시 맵은 키를 값에 매핑할 수 있는 구조인, 연관 배열 추상 자료형(ADT)을 구현하는 자료구조다.

 해시 테이블의 가장 큰 특징은 대부분의 연산이 분할 상환 분석에 따른 시간 복잡도가 O(1)이라는 점이다. 덕분에 데이터 양에 관계 없이 빠른 성능을 기대할 수 있다는 장점이 있다.

 ## 해시

 해시 함수란 임의 크기 데이터를 고정 크기 값으로 매핑하는 데 사용할 수 있는 함수를 말한다.

 해시 테이블의 핵심은 해시 함수다.

 해시 테이블을 인덱싱하기 위해 이처럼 해시 함수를 사용하는 것을 해싱(Hashing)이라 하며, 해싱은 정보를 가능한 한 빠르게 저장하고 검색하기 위해 사용하는 중요한 기법 중 하나다.

 해싱은 최적의 검색이 필요한 분야에 사용

 성능 좋은 해시 함수들의 특징

 - 해시 함수 값 충돌의 최소화
     - 충돌은 얼마나 많이 발생할까?
     - EX. 생일 문제(Birthday Problem)
         
         생일의 가짓수는 365개이므로, 여러 사람이 모였을 때 생일이 같은 2명이 존재할 확률을 얼핏 생각해보면 비둘기집 원리에 따라 366명 이상이 모여야 일어나는 일 같지만 실제로는 23명만 모여도 50%를 넘고, 57명이 모이면 그때부터는 99%를 넘어선다.
         
         → 이처럼 일반적인 상식과는 달리, 충돌은 생각보다 쉽게 일어나므로 충돌을 최소화하는 일은 무엇보다 중요하다.
         
 - 쉽고 빠른 연산
 - 해시 테이블 전체에 해시 값이 균일하게 분포
 - 사용할 키의 모든 정보를 이용하여 해싱
 - 해시 테이블 사용 효율이 높을 것

 왜 충돌은 일어날 수밖에 없을까?

 ### 비둘기집 원리

 n개의 아이템을 m개 컨테이너에 넣을 때, n>m이라면 적어도 하나의 컨테이너에는 반드시 2개 이상의 아이템이 들어 있다는 원리를 말한다.

 ### 로드 팩터(Load Factor)

 해시 테이블에 저장된 데이터 개수 n을 버킷의 개수 k로 나눈 것이다.

 로드 팩터의 비율에 따라서 해시 함수를 재작성해야 될지 또는 해시 테이블의 크기를 조정해야 할지를 결정한다. 또한 이 값은 해시 함수가 키들을 잘 분산해 주는지를 말하는 효율성 측정에도 사용된다.

 일반적으로 로드 팩터가 증가할수록 해시 테이블의 성능은 점점 감소하게 된다.

 충돌이 발생할 경우 어떤 식으로 처리?

 ### 개별 체이닝(Separate Chaining)

 충돌 발생 시 연결 리스트로 연결하는 방식이다.

 1. 키의 해시 값을 계산한다.
 2. 해시 값을 이용해 배열의 인덱스를 구한다.
 3. 같은 인덱스가 있다면 연결 리스트로 연결한다.

 잘 구현한 경우 대부분의 탐색은 O(1)이지만 최악의 경우, 즉 모든 충돌이 발생했다고 가정할 경우에는 O(n)이 된다.

 ### 오픈 어드레싱(Open Addressing)

 충돌 발생 시 탐사를 통해 빈 공간을 찾아나서는 방식

 사실상 무한정 저장할 수 있는 체이닝 방식과 달리, 오픈 어드레싱 방식은 전체 슬롯의 개수 이상은 저장할 수 없다.

 충돌이 일어나면 테이블 공간 내에 탐사(Probing)를 통해 빈 공간을 찾아 해결하며, 이 때문에 개별 체이닝 방식과 달리, 모든 원소가 반드시 자신의 해시값과 일치하는 주소에 저장된다는 보장은 없다.
 
 
 
 */
